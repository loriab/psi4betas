/*
 * @BEGIN LICENSE
 *
 * Psi4: an open-source quantum chemistry software package
 *
 * Copyright (c) 2007-2016 The Psi4 Developers.
 *
 * The copyrights for code used from other parties are included in
 * the corresponding files.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @END LICENSE
 */

  try {
    Options options;
    
    std::cout << "testing Options class" << std::endl;
    options.add("mult", 1);
    options.add("array", new ArrayType());
    options.add("map", new MapType());
    options.add("reference", "rhf", "rhf rohf uhf tcscf");
    
    options["array"].add(3);                       // 0
    options["array"].add(0);                       // 1
    options["array"].add("3rd", "");               // 2
    options["array"].add(new ArrayType());         // 3
    options["array"][3].add("inner", "");          // 3-0
    options["array"][3].add(new ArrayType());      // 3-1
    options["array"][3][1].add("inner-inner", ""); // 3-1-0
    
    options["map"].add("test", 10);
    options["map"].add("array", new ArrayType());
    options["map"]["array"].add(20);
    
    std::cout << "mult " << options["mult"].to_string() << std::endl;
    std::cout << "array " << options["array"].to_string() << std::endl;
    
    std::cout << "array[2] " << options["array"][2].to_string() << std::endl;
    std::cout << "array[3] " << options["array"][3].to_string() << std::endl;
    
    std::cout << "map " << options["map"].to_string() << std::endl << std::endl;

    // Testing assign
    options["mult"].assign(2);
    options["map"]["array"][0].assign(256);
    
    options.print();
    
    // Test StringDataType choices
    options["reference"].assign("ROHF");
    
    options.print();
  }
  catch (IndexException e) {
    std::cout << "IndexException caught: " << e.what() << std::endl;
  }
  catch (DuplicateKeyException e) {
    std::cout << "DuplicateKeyException caught: " << e.what() << std::endl;
  }
  catch (DataTypeException e) {
    std::cout << "DataTypeException caught: " << e.what() << std::endl;
  }
  catch (NOT_IMPLEMENTED_EXCEPTION e) {
    std::cout << "NOT_IMPLEMENTED_EXCEPTION caught: " << e.what() << std::endl;
  }

