
.PHONY: tests quicktests cc_tests clean quicktestsclean longtests longtestsclean

# Tutorial test cases
tutorial_subdirs = tu1-h2o-energy tu2-ch2-energy tu3-h2o-opt tu4-h2o-freq tu5-sapt tu6-cp-ne2

# Tests that depend on madness:
#  This is probably not the final solution:
maddness_subdirs = dfmp2-1 dfmp2-2

cc_subdirs = cc1 cc2 cc3 cc4 cc4a cc5a cc6 cc8 cc8a cc8b cc8c cc9 cc9a cc10 cc11 \
cc12 cc13 cc13a cc14 cc15 cc16 cc17 cc18 cc19 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28 \
cc29 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39 cc40 cc41 cc42 \
cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc50 cc51 cc52 # cc5 these should be restored when fixed

cepa_subdirs = cepa1 cepa2 cepa3

ci_subdirs = cisd-h2o+-0 cisd-h2o+-1 cisd-h2o+-2 cisd-h2o-clpse cisd-sp cisd-sp-2 fci-h2o fci-h2o-2 fci-h2o-fzcv fci-dipole fci-tdm fci-tdm-2 cisd-opt-fd rasci-c2-active rasci-h2o rasci-ne zaptn-nh2 mpn-bh ci-multi

dcft_subdirs = dcft1 dcft2 dcft3 dcft4 dcft5

mcscf_subdirs = mcscf1 mcscf2 mcscf3

df_subdirs = sapt1 sapt3 sapt5 dfmp2-1 dfmp2-2 dfmp2-3 ghosts

psimrcc_subdirs = psimrcc-sp1 psimrcc-ccsd_t-1 psimrcc-ccsd_t-2 psimrcc-ccsd_t-3 psimrcc-ccsd_t-4 psimrcc-pt2 psimrcc-fd-freq1 psimrcc-fd-freq2

mints_subdirs = mints1 mints2 mints3 mints4 mints5

matrix_subdirs = matrix1

opt_subdirs = opt1 opt1-fd opt2 opt2-fd opt3 opt4 opt5 fd-gradient fd-freq-energy fd-freq-gradient fd-freq-gradient-large gibbs

mp2_subdirs = mp2-1 omp2-1 omp2-2 omp2-3 omp3-1 omp3-1 omp3-2 omp3-3

scf_subdirs = scf1 scf2 scf3 scf4 scf5 scf6 sad1 castup1 mom props1 props2 props3 dft1 dft3 dfscf-bz2 pubchem1 dft1-alt dft-b2plyp dft-pbe0-2 dft-dldf castup2 castup3 dft-grad

python_test_subdirs = pywrap-db1 pywrap-db2 pywrap-cbs1 pywrap-all pywrap-alias pywrap-opt-sowreap pywrap-basis pywrap-db3 psithon1

dftd3_subdirs = dftd3-energy dftd3-grad

mrcc_subdirs = 

longtest_subdirs = sapt2 sapt4

subdirs = \
$(tutorial_subdirs) \
$(mints_subdirs) \
$(matrix_subdirs) \
$(scf_subdirs) \
$(opt_subdirs) \
$(df_subdirs) \
$(mp2_subdirs) \
$(ci_subdirs) \
$(cc_subdirs) \
$(cepa_subdirs) \
$(python_test_subdirs) \
${mcscf_subdirs} \
$(psimrcc_subdirs) \
$(dcft_subdirs)

# Compile the plugins, if we activated them
HAVE_PLUGINS=@HAVE_PLUGINS@
ifeq ($(HAVE_PLUGINS),yes)
   subdirs += $(plugin_subdirs)
endif

# only short tests, only one from each type of computation
# the idea is that all these should run in ~ 5-10 minutes
quicktestdirs = tu1-h2o-energy tu2-ch2-energy tu3-h2o-opt tu4-h2o-freq \
  tu5-sapt castup1 scf1 scf2 scf3 scf5 dft1 dfmp2-1 \
  cc1 cc2 cc3 cc4 cc8 cc8a cc12 \
  cc15 cc16 cc17 cc18 cc19 cc23 cc24 cc28 cc32 cc49 \
  fci-dipole cisd-h2o+-0 ci-multi \
  cisd-opt-fd rasci-h2o mpn-bh \
  dcft1 mcscf1 sapt1 sad1 \
  psimrcc-sp1 mints1 mints2 matrix1 opt1 opt1-fd gibbs omp2-1 omp2-2 omp2-3 omp3-1 omp3-2 omp3-3 \
  pywrap-db1 pywrap-db2 pywrap-cbs1 pywrap-all pywrap-alias

HAVE_MADNESS=@HAVE_MPI@
ifeq ($(HAVE_MADNESS),1)
   subdirs += $(maddness_subdirs)
endif
 
have_dftd3 := $(shell which dftd3)
ifneq ($(have_dftd3),)
   subdirs += $(dftd3_subdirs)
   quicktestdirs += dftd3-energy
endif

have_dmrcc := $(shell which dmrcc)
ifneq ($(have_mrcc),)
   subdirs += $(mrcc_subdirs)
endif

define runtests
    for dir in $1; \
	do \
        (\
        cd $${dir} &&\
        echo "Testing $${dir}..." | tee -a ../../test-case-results &&\
        $(MAKE) && cat $${dir}.test >> ../../test-case-results;\
        );\
        if [ $$? != 0 ]; then\
         echo "\tFAILED" | tee -a ../test-case-results; exit 1;\
        fi;\
	done
endef

tests:
	$(call runtests, $(subdirs))

opttests:
	$(call runtests, $(opt_subdirs))

quicktests:
	$(call runtests, $(quicktestdirs))

cepa_tests:
	$(call runtests, $(cepa_subdirs))

cc_tests:
	$(call runtests, $(cc_subdirs))

ci_tests:
	$(call runtests, $(ci_subdirs))

mints_tests:
	$(call runtests, $(mints_subdirs))

mp2_tests:
	$(call runtests, $(mp2_subdirs))

matrix_tests:
	$(call runtests, $(matrix_subdirs))

mcscf_tests:
	$(call runtests, $(mcscf_subdirs))

scf_tests:
	$(call runtests, $(scf_subdirs))

df_tests:
	$(call runtests, $(df_subdirs))

dcft_tests:
	$(call runtests, $(dcft_subdirs))

psimrcc_tests:
	$(call runtests, $(psimrcc_subdirs))

python_tests:
	$(call runtests, $(python_test_subdirs))

dftd3_tests:
	$(call runtests, $(dftd3_subdirs))

longtests:
	$(call runtests, $(longtest_subdirs))

plugins:
	for dir in $(plugin_subdirs); \
	do \
	 (cd $${dir} && echo ...Testing $${dir}... && $(MAKE)) || exit 1; \
	done

clean:
	for dir in $(subdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done
	rm -f ../test-case-results

quicktestsclean:
	for dir in $(quicktestdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done
	rm -f ../test-case-results

longtestsclean:
	for dir in $(longtest_subdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done

top_srcdir = @top_srcdir@
srcdir = @srcdir@
top_objdir = ..

$(top_srcdir)/configure: $(top_srcdir)/configure.ac $(top_srcdir)/aclocal.m4
	cd $(top_srcdir) && autoconf

$(top_objdir)/config.status: $(top_srcdir)/configure
	cd $(top_objdir) && ./config.status --recheck

Makefile: $(srcdir)/Makefile.in $(top_objdir)/config.status
	cd $(top_objdir) && CONFIG_FILES=tests/Makefile ./config.status

